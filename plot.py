'''
This module consolidates all figure-generating functions for visualizing the
results generated by a WorkflowManager instance.

Functions
---------
plot_main()
    Orchestrates the generation of all defined plots based on the
    configuration files.

See Also
--------
plotting : Contains individual modules for each type of plot.
config_management : Manages configuration settings for the project.
data_management : Handles data loading and preprocessing.
metrics_management : Manages evaluation metrics for models.
results_management : Manages storage and retrieval of analysis results.
results_analysis : Analyzes and interprets results from model evaluations.
'''

from plotting import (
    benchmarking,
    chemical_coverage,
    feature_completeness,
    feature_distributions,
    importance_scores,
    important_features,
    missing_features,
    model_performance,
    moe,
    pod
)

from config_management import UnifiedConfiguration
from data_management import DataManager
from metrics_management import MetricsManager
from results_management import ResultsManager
from results_analysis import ResultsAnalyzer

def plot_main():
    '''
    Generate a series of plots as specified by the configuration files.

    This function acts as the main entry point for generating all plots defined. 
    It initializes necessary managers for data, metrics, results, and analysis,
    and sequentially calls plotting functions with appropriate parameters 
    derived from the configuration settings.

    Returns
    -------
    None
        The resulting figures are saved to a dedicated directory.
    '''
    config = UnifiedConfiguration()

    data_manager = DataManager(config.data, config.path)
    metrics_manager = MetricsManager(config.category_to_dict('metric'))
    results_manager = ResultsManager(
        results_file_type=config.data.file_type
        )
    results_analyzer = ResultsAnalyzer(
        results_manager, 
        data_manager,
        config.plot
        )

    feature_distributions.feature_distributions(
        config.path.file_for_features_source['opera']
        )

    chemical_coverage.pairwise_scatters_and_kde_subplots(
        config.path.file_for_features_source['opera'], 
        config.path.surrogate_pods_file,
        config.plot
        )

    feature_completeness.proportions_incomplete_subplots(
        config.path.file_for_features_source['opera'], 
        config.path.opera_AD_file, 
        config.path.surrogate_pods_file,
        config.plot,
        threshold=config.preprocessor.settings['MissingValuesSelector']['kwargs']['threshold']
        )

    important_features.important_feature_counts(results_analyzer, config.plot)

    importance_scores.importances_boxplots(results_analyzer, config.plot)

    importance_scores.importances_replicates_boxplots(
        results_analyzer, 
        config.plot
        )

    model_performance.in_and_out_sample_comparisons(
        results_analyzer, 
        config.plot, 
        metrics_manager.function_for_metric
        )

    benchmarking.benchmarking_scatterplots(
        results_analyzer,
        metrics_manager.function_for_metric,
        config.plot
        )

    moe.margins_of_exposure_cumulative(
        results_analyzer, 
        config.plot
        )

    pod.cumulative_pod_distributions(results_analyzer, config.plot)

    missing_features.predictions_by_missing_feature(
        results_analyzer, 
        config.plot
        )
    
if __name__ == '__main__':
    print('Plotting results...')
    plot_main()
    print('Plotting completed.')